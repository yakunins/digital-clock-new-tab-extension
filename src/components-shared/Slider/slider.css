.react-aria-Slider {
    --s-1px: 0.0625rem;
    --s-2px: 0.125rem;
    --s-3px: 0.1875rem;
    --s-4px: 0.25rem;

    --c-accent: var(--c-text, currentColor);
    --c-accent-88: color-mix(in srgb, var(--c-accent), transparent 88%);
    --c-accent-76: color-mix(in srgb, var(--c-accent), transparent 76%);
    --c-accent-50: color-mix(in srgb, var(--c-accent), transparent 50%);

    display: grid;
    grid-template-areas:
        "label output"
        "track track";
    grid-template-columns: 1fr auto;

    .react-aria-Label {
        grid-area: label;
        margin-bottom: calc(var(--padding) * 0.5);
    }

    .react-aria-SliderOutput {
        grid-area: output;
    }

    .react-aria-SliderTrack {
        --slider-height: calc(var(--s-1px) * 24);
        --track-thickness: calc(var(--s-1px) * 6);
        --thumb-size: calc(var(--slider-height) - var(--s-2px));
        --thumb-stroke: var(--s-2px);
        --thumb-opacity: 0.25;
        --c-thumb: var(--c-accent);
        --duration: 0.2s;

        grid-area: track;
        position: relative;
        cursor: pointer;
        background-color: transparent;
    }

    .react-aria-SliderThumb {
        --hover-opacity: var(--dragging-thumb-hover-opacity, 1);

        cursor: pointer;
        forced-color-adjust: none;
        width: var(--thumb-size);
        height: var(--thumb-size);

        /* extended hover area */
        &:after {
            --hover-extend: calc(var(--s-4px) * -1);

            content: "";
            position: absolute;
            top: var(--hover-extend);
            bottom: var(--hover-extend);
            left: var(--hover-extend);
            right: var(--hover-extend);
        }
    }
    .react-aria-SliderTrack:has([data-focused].react-aria-SliderThumb),
    .react-aria-SliderTrack:has([data-focus-visible].react-aria-SliderThumb) {
        .react-aria-SliderTrack-pseudothumb-focus {
            opacity: 1;
        }
        .react-aria-SliderTrack-pseudothumb {
            opacity: 0;
        }
    }
    .react-aria-SliderTrack:has([data-focused].react-aria-SliderThumb),
    .react-aria-SliderTrack:has([data-focus-visible].react-aria-SliderThumb),
    .react-aria-SliderTrack:has([data-dragging].react-aria-SliderThumb) {
    }

    &[data-orientation="horizontal"] {
        flex-direction: column;
        width: 100%;

        .react-aria-SliderTrack {
            --min-filled: var(--s-2px);

            height: var(--slider-height);
            width: 100%;

            .react-aria-SliderTrack-pseudotrack {
                --c-track-end: color-mix(
                    in srgb,
                    var(--c-thumb),
                    transparent 65%
                );
                --thumb-left-side: calc(var(--filled) - var(--thumb-size) / 2);
                --thumb-right-side: calc(var(--filled) + var(--thumb-size) / 2);

                position: absolute;
                height: var(--track-thickness);
                width: 100%;
                top: 50%;
                transform: translateY(-50%);
                opacity: 0.35;

                /* track */
                &:before,
                &:after {
                    content: "";
                    height: 100%;
                    position: absolute;
                    background-color: transparent;
                }
                &:before {
                    --right: calc(100% - var(--thumb-left-side) - var(--s-1px));

                    background-image: linear-gradient(
                        -90deg,
                        var(--c-thumb),
                        var(--c-track-end) calc(var(--thumb-size) * 2),
                        var(--c-track-end)
                    );
                    left: 0;
                    right: var(--right);
                }
                &:after {
                    --left: calc(var(--thumb-right-side) - var(--s-1px));

                    background-image: linear-gradient(
                        90deg,
                        var(--c-thumb),
                        var(--c-track-end) calc(var(--thumb-size) * 2),
                        var(--c-track-end)
                    );
                    left: var(--left);
                    right: 0;
                }
            }
            .react-aria-SliderTrack-pseudotrack
                .react-aria-SliderTrack-pseudothumb,
            .react-aria-SliderTrack-pseudothumb-focus {
                border-radius: 100vmax;
                box-shadow:
                    inset 0 0 0 var(--thumb-stroke) var(--c-thumb),
                    0 0 0 0 var(--c-thumb);
                box-sizing: border-box;
                position: absolute;
                top: calc(50% - var(--thumb-size) / 2);
                left: calc(var(--filled) + var(--thumb-size) / -2);
                width: var(--thumb-size);
                height: var(--thumb-size);
            }
            .react-aria-SliderTrack-pseudothumb-focus {
                opacity: 0;
            }
        }

        .react-aria-SliderThumb {
            top: 50%;
        }

        .react-aria-SliderTrack-pseudothumb,
        .react-aria-SliderTrack-pseudothumb-focus,
        .react-aria-SliderTrack-pseudotrack:before,
        .react-aria-SliderTrack-pseudotrack:after {
            transition-property: box-shadow, opacity, background-color;
            transition-duration: var(--duration);
        }
    }
}

body:has(.react-aria-SliderThumb[data-dragging]) {
    --dragging-thumb-hover-opacity: 0;
}

body:not(:has([data-dragging])) {
    .react-aria-Slider:has(.react-aria-SliderThumb:hover) {
        .react-aria-SliderTrack-pseudothumb,
        .react-aria-SliderTrack-pseudothumb-focus {
            box-shadow:
                inset 0 0 0 0 var(--c-thumb),
                0 0 0 var(--thumb-stroke) var(--c-thumb) !important;
        }
        .react-aria-SliderTrack-pseudotrack {
            &:before,
            &:after {
                opacity: 0.65;
                background-color: color-mix(
                    in srgb,
                    var(--c-accent),
                    transparent 72.5%
                );
            }
            &:before {
                right: calc(var(--right) + var(--s-1px));
            }
            &:after {
                left: calc(var(--left) + var(--s-1px));
            }
        }
    }
}
.react-aria-SliderTrack:not(:has([data-dragging])) {
    .react-aria-SliderTrack-pseudothumb,
    .react-aria-SliderTrack-pseudothumb-focus,
    .react-aria-SliderTrack-pseudotrack:before,
    .react-aria-SliderTrack-pseudotrack:after {
        transition-property: all;
        transition-duration: var(--duration);
    }
}
